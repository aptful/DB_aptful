// Generated by view binder compiler. Do not edit!
package com.example.myapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class OptionBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button accountButton;

  @NonNull
  public final TextView accountText;

  @NonNull
  public final ImageButton buckButton;

  @NonNull
  public final ImageButton homeButton;

  @NonNull
  public final TextView keywordScreenText;

  @NonNull
  public final View lineOrange;

  @NonNull
  public final Button logoutButton;

  @NonNull
  public final TextView logoutText;

  @NonNull
  public final Button ruleButton;

  @NonNull
  public final TextView ruleText;

  @NonNull
  public final Button signoutButton;

  @NonNull
  public final TextView signoutText;

  private OptionBinding(@NonNull LinearLayout rootView, @NonNull Button accountButton,
      @NonNull TextView accountText, @NonNull ImageButton buckButton,
      @NonNull ImageButton homeButton, @NonNull TextView keywordScreenText,
      @NonNull View lineOrange, @NonNull Button logoutButton, @NonNull TextView logoutText,
      @NonNull Button ruleButton, @NonNull TextView ruleText, @NonNull Button signoutButton,
      @NonNull TextView signoutText) {
    this.rootView = rootView;
    this.accountButton = accountButton;
    this.accountText = accountText;
    this.buckButton = buckButton;
    this.homeButton = homeButton;
    this.keywordScreenText = keywordScreenText;
    this.lineOrange = lineOrange;
    this.logoutButton = logoutButton;
    this.logoutText = logoutText;
    this.ruleButton = ruleButton;
    this.ruleText = ruleText;
    this.signoutButton = signoutButton;
    this.signoutText = signoutText;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static OptionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static OptionBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.option, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static OptionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.accountButton;
      Button accountButton = ViewBindings.findChildViewById(rootView, id);
      if (accountButton == null) {
        break missingId;
      }

      id = R.id.accountText;
      TextView accountText = ViewBindings.findChildViewById(rootView, id);
      if (accountText == null) {
        break missingId;
      }

      id = R.id.buckButton;
      ImageButton buckButton = ViewBindings.findChildViewById(rootView, id);
      if (buckButton == null) {
        break missingId;
      }

      id = R.id.homeButton;
      ImageButton homeButton = ViewBindings.findChildViewById(rootView, id);
      if (homeButton == null) {
        break missingId;
      }

      id = R.id.keywordScreenText;
      TextView keywordScreenText = ViewBindings.findChildViewById(rootView, id);
      if (keywordScreenText == null) {
        break missingId;
      }

      id = R.id.line_orange;
      View lineOrange = ViewBindings.findChildViewById(rootView, id);
      if (lineOrange == null) {
        break missingId;
      }

      id = R.id.logoutButton;
      Button logoutButton = ViewBindings.findChildViewById(rootView, id);
      if (logoutButton == null) {
        break missingId;
      }

      id = R.id.logoutText;
      TextView logoutText = ViewBindings.findChildViewById(rootView, id);
      if (logoutText == null) {
        break missingId;
      }

      id = R.id.ruleButton;
      Button ruleButton = ViewBindings.findChildViewById(rootView, id);
      if (ruleButton == null) {
        break missingId;
      }

      id = R.id.ruleText;
      TextView ruleText = ViewBindings.findChildViewById(rootView, id);
      if (ruleText == null) {
        break missingId;
      }

      id = R.id.signoutButton;
      Button signoutButton = ViewBindings.findChildViewById(rootView, id);
      if (signoutButton == null) {
        break missingId;
      }

      id = R.id.signoutText;
      TextView signoutText = ViewBindings.findChildViewById(rootView, id);
      if (signoutText == null) {
        break missingId;
      }

      return new OptionBinding((LinearLayout) rootView, accountButton, accountText, buckButton,
          homeButton, keywordScreenText, lineOrange, logoutButton, logoutText, ruleButton, ruleText,
          signoutButton, signoutText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
